[{"/home/john/Documents/GitHub/taskbox/src/index.js":"1","/home/john/Documents/GitHub/taskbox/src/App.js":"2","/home/john/Documents/GitHub/taskbox/src/reportWebVitals.js":"3","/home/john/Documents/GitHub/taskbox/src/components/Task.stories.js":"4","/home/john/Documents/GitHub/taskbox/src/components/Task.js":"5","/home/john/Documents/GitHub/taskbox/src/components/TaskList.stories.js":"6","/home/john/Documents/GitHub/taskbox/src/components/TaskList.js":"7","/home/john/Documents/GitHub/taskbox/src/lib/redux.js":"8"},{"size":500,"mtime":1611849681452,"results":"9","hashOfConfig":"10"},{"size":192,"mtime":1611854549644,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1611849681452,"results":"12","hashOfConfig":"10"},{"size":605,"mtime":1612118031916,"results":"13","hashOfConfig":"14"},{"size":1396,"mtime":1612197782576,"results":"15","hashOfConfig":"14"},{"size":1317,"mtime":1612204833556,"results":"16","hashOfConfig":"14"},{"size":1937,"mtime":1612205314067,"results":"17","hashOfConfig":"14"},{"size":1113,"mtime":1612204917978,"results":"18","hashOfConfig":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13es626",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"okmh3h",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/john/Documents/GitHub/taskbox/src/index.js",[],"/home/john/Documents/GitHub/taskbox/src/App.js",[],"/home/john/Documents/GitHub/taskbox/src/reportWebVitals.js",[],"/home/john/Documents/GitHub/taskbox/src/components/Task.stories.js",["39"],"import React from \"react\";\n\nimport Task from \"./Task\";\n\nexport default {\n  component: Task,\n  title: \"Task\",\n};\n\nconst Template = (args) => <Task {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  task: {\n    id: \"1\",\n    title: \"Test Task\",\n    state: \"TASK_INBOX\",\n    updatedAt: new Date(2018, 0, 1, 9, 0),\n  },\n};\n\nexport const Pinned = Template.bind({});\nPinned.args = {\n  task: {\n    ...Default.args.task,\n    state: \"TASK_PINNED\",\n  },\n};\n\nexport const Archived = Template.bind({});\nArchived.args = {\n  task: {\n    ...Default.args.task,\n    state: \"TASK_ARCHIVED\",\n  },\n};\n",["40","41"],"/home/john/Documents/GitHub/taskbox/src/components/Task.js",["42"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Task({\n  task: { id, title, state },\n  onArchiveTask,\n  onPinTask,\n}) {\n  return (\n    <div className={`list-item ${state}`}>\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          defaultChecked={state === \"TASK_ARCHIVED\"}\n          disabled={true}\n          name=\"checked\"\n        />\n        <span className=\"checkbox-custom\" onClick={() => onArchiveTask(id)} />\n      </label>\n\n      <div className=\"title\">\n        <input\n          type=\"text\"\n          value={title}\n          readOnly={true}\n          placeholder=\"input title\"\n        />\n      </div>\n\n      <div className=\"actions\" onClick={(event) => event.stopPropagation()}>\n        {state !== \"TASK_ARCHIVED\" && (\n          <a onClick={() => onPinTask(id)}>\n            <span className={`icon-star`}> </span>\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n\nTask.propTypes = {\n  /** Composition of the task */\n  task: PropTypes.shape({\n    /** Id of the task */\n    id: PropTypes.string.isRequired,\n    /** Title of the task */\n    title: PropTypes.string.isRequired,\n    /** Current state of the task */\n    state: PropTypes.string.isRequired,\n  }),\n  /** Event to change the task to archived */\n  onArchiveTask: PropTypes.func,\n  /** Event to change the task to pinned */\n  onPinTask: PropTypes.func,\n};\n","/home/john/Documents/GitHub/taskbox/src/components/TaskList.stories.js",["43"],"import React from \"react\";\n\nimport { PureTaskList } from \"./TaskList\";\nimport * as TaskStories from \"./Task.stories\";\n\nexport default {\n  component: PureTaskList,\n  title: \"TaskList\",\n  decorators: [(story) => <div style={{ padding: \"3rem\" }}>{story()}</div>],\n};\n\nconst Template = (args) => <PureTaskList {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {\n  // Shaping the stories through args composition.\n  // The data was inherited from the Default story in task.stories.js.\n  tasks: [\n    { ...TaskStories.Default.args.task, id: \"1\", title: \"Task 1\" },\n    { ...TaskStories.Default.args.task, id: \"2\", title: \"Task 2\" },\n    { ...TaskStories.Default.args.task, id: \"3\", title: \"Task 3\" },\n    { ...TaskStories.Default.args.task, id: \"4\", title: \"Task 4\" },\n    { ...TaskStories.Default.args.task, id: \"5\", title: \"Task 5\" },\n    { ...TaskStories.Default.args.task, id: \"6\", title: \"Task 6\" },\n  ],\n};\n\nexport const WithPinnedTasks = Template.bind({});\nWithPinnedTasks.args = {\n  tasks: [\n    ...Default.args.tasks.slice(0, 5),\n    { id: \"6\", title: \"Task 6 (Pinned)\", state: \"TASK_PINNED\" },\n  ],\n};\n\nexport const Loading = Template.bind({});\nLoading.args = {\n  tasks: [],\n  loading: true,\n};\n\nexport const Empty = Template.bind({});\nEmpty.args = {\n  ...Loading.args,\n  loading: false,\n};\n","/home/john/Documents/GitHub/taskbox/src/components/TaskList.js",[],"/home/john/Documents/GitHub/taskbox/src/lib/redux.js",[],{"ruleId":"44","severity":1,"message":"45","line":5,"column":1,"nodeType":"46","endLine":8,"endColumn":3},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":32,"column":11,"nodeType":"53","endLine":32,"endColumn":44},{"ruleId":"44","severity":1,"message":"45","line":6,"column":1,"nodeType":"46","endLine":10,"endColumn":3},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]